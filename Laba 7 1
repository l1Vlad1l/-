import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ThreadPoolExample {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int threadsNumber = 4;
        
        ExecutorService executor = Executors.newFixedThreadPool(threadsNumber);
        
        // Разделение массива на равные части и обработка каждой части в отдельном потоке
        int chunkSize = array.length / threadsNumber;
        int startIndex = 0;
        int endIndex = chunkSize;
        for (int i = 0; i < threadsNumber; i++) {
            ChunkSumTask task = new ChunkSumTask(array, startIndex, endIndex);
            executor.submit(task);
            startIndex = endIndex;
            endIndex += chunkSize;
        }
        
        executor.shutdown();
        
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        // Суммирование результатов всех потоков
        int sum = 0;
        for (ChunkSumTask task : ChunkSumTask.getTasks()) {
            sum += task.getResult();
        }
        
        // Вывод результата
        System.out.println("Сумма элементов массива: " + sum);
    }
}

class ChunkSumTask implements Runnable {
    private static final Object lock = new Object();
    private static final List<ChunkSumTask> tasks = new ArrayList<>();
    
    private final int[] array;
    private final int startIndex;
    private final int endIndex;
    private int result;
    
    public ChunkSumTask(int[] array, int startIndex, int endIndex) {
        this.array = array;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        
        synchronized (lock) {
            tasks.add(this);
        }
    }
    
    public int getResult() {
        return result;
    }
    
    public static List<ChunkSumTask> getTasks() {
        return tasks;
    }
    
    @Override
    public void run() {
        for (int i = startIndex; i < endIndex; i++) {
            result += array[i];
        }
    }
}
